#!/usr/bin/env bash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

if [ -z "$DEV_ENV" ]; then
  echo "env var DEV_ENV needs to be present"
  exit 1
fi

# if i just did DEV_ENV=$(pwd) ./run then this is needed for the rest of the
# scripts
export DEV_ENV="$DEV_ENV"

grep=""
dry_run="0"
ignore="0" #NOTE: if ./install --ignore pkg => install everything except pkg

while [[ $# -gt 0 ]]; do
  echo "ARG: \"$1\""
  if [[ "$1" == "--dry" ]]; then
    dry_run="1"
  elif [[ "$1" == "--ignore" ]]; then
    ignore="1"
  else
    grep+=" $1" # Append instead of overwrite
  fi
  shift
done

# Trim leading space
grep="${grep#" "}"

log() {
  if [[ $dry_run == "1" ]]; then
    echo "[DRY_RUN]: $1"
  else
    echo "$1"
  fi
}

log "RUN: env: $env -- grep: $grep"

# Check the OS type to determine the correct find command
if [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS: Use -perm for checking executability
  runs_dir=$(find "$script_dir/installs" -mindepth 1 -maxdepth 2 -type f -perm +111)
else
  # Linux: Use -executable flag
  runs_dir=$(find $script_dir/installs -mindepth 1 -maxdepth 2 -executable)
fi

# TODO: add/modify filtering for preventing unnecessary installations especially for work
# If multiple filters exist, transform them into a grep-friendly OR pattern
if [[ -n "$grep" ]]; then
  grep_pattern=$(echo "$grep" | sed 's/ /|/g') # Convert space-separated words to OR regex
fi

for s in $runs_dir; do
  # Skip scripts if they do not match the grep pattern
  if [[ -n "$grep_pattern" ]]; then
    if [[ "$ignore" == "0" ]] && ! echo "$s" | grep -Eq "$grep_pattern"; then
      log "grep \"$grep_pattern\" filtered out $s"
      continue
    elif [[ "$ignore" == "1" ]] && echo "$s" | grep -Eq "$grep_pattern"; then
      log "grep \"$grep_pattern\" ignored $s"
      continue
    fi
  fi

  log "running script: $s"
  if [[ $dry_run == "0" ]]; then
    $s
  fi
done
